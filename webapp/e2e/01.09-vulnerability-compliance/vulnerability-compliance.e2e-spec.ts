/*
 *Copyright 2018 T Mobile, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); You may not use
 * this file except in compliance with the License. A copy of the License is located at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { browser, protractor, $} from 'protractor';
import { OverviewCompliance } from '../page-objects/overview.po';
import { VulnerabilityCompliance } from '../page-objects/vulnerability-compliance.po';
import { AllVulnerabilities } from '../page-objects/all-vulnerabilities.po';

const timeOutHigh = 180000;

describe('VulnerabilityCompliance', () => {
  let OverviewCompliance_po: OverviewCompliance;
  let VulnerabilityCompliance_po: VulnerabilityCompliance;
  let AllVulnerabilities_po: AllVulnerabilities;
  const EC = protractor.ExpectedConditions;

  beforeAll(() => {
    OverviewCompliance_po = new OverviewCompliance();
    AllVulnerabilities_po = new AllVulnerabilities();
    VulnerabilityCompliance_po = new VulnerabilityCompliance();
  });

  it('Check title of page', () => {
    browser.wait(EC.visibilityOf( OverviewCompliance_po.getVulnerabilities()), timeOutHigh);
    browser.wait(EC.elementToBeClickable( OverviewCompliance_po.getVulnerabilities()), timeOutHigh);
    OverviewCompliance_po.getVulnerabilities().click();
    browser.wait(EC.visibilityOf(VulnerabilityCompliance_po.getVulHeaderText()), timeOutHigh);
    expect(VulnerabilityCompliance_po.getVulHeaderText().getText()).toEqual('Vulnerabilities');
  });

  it('Check redirect to All vulnerabilities on click of total vulnerabilities', () => {
    browser.wait(EC.visibilityOf( VulnerabilityCompliance_po.getOverallVulnerabilities()), timeOutHigh);
    browser.wait(EC.elementToBeClickable( VulnerabilityCompliance_po.getOverallVulnerabilities()), timeOutHigh);
    VulnerabilityCompliance_po.getOverallVulnerabilities().click();
    browser.wait(EC.visibilityOf(AllVulnerabilities_po.getAllVulHeaderText()), timeOutHigh);
    expect(AllVulnerabilities_po.getAllVulHeaderText().getText()).toEqual('All Vulnerabilities');
    browser.wait(EC.visibilityOf( AllVulnerabilities_po.getBackArrow()), timeOutHigh);
    browser.wait(EC.elementToBeClickable(AllVulnerabilities_po.getBackArrow()), timeOutHigh);
    AllVulnerabilities_po.getBackArrow().click();
  });

  it('Verify list table filter search', () => {
    browser.wait(EC.visibilityOf(VulnerabilityCompliance_po.getListFirstS3()), timeOutHigh);
    VulnerabilityCompliance_po.getSearchInput().click();
    browser.sleep(201);
    browser.wait(EC.visibilityOf(VulnerabilityCompliance_po.getSearchInput()), timeOutHigh);
    VulnerabilityCompliance_po.getSearchInput().sendKeys('my');
    VulnerabilityCompliance_po.getFirstRowCell().getText().then(function (text) {
      expect(text.toLowerCase()).toContain('my');
    });
    browser.sleep(401);
    VulnerabilityCompliance_po.getSearchInput().sendKeys('');
  });

  it('verify total of s3, s4, s5 is overall total vulnerabilities', () => {
    browser.wait(EC.visibilityOf( VulnerabilityCompliance_po.getOverallVulnerabilities()), timeOutHigh);
    VulnerabilityCompliance_po.getOverallVulnerabilities().getText().then(function(text) {
      const total = parseInt(text, 10);
      let severity_total = 0;
      browser.wait(EC.visibilityOf( VulnerabilityCompliance_po.getdoughnutS3Item()), timeOutHigh);
      browser.wait(EC.visibilityOf( VulnerabilityCompliance_po.getdoughnutS4Item()), timeOutHigh);
      browser.wait(EC.visibilityOf( VulnerabilityCompliance_po.getdoughnutS5Item()), timeOutHigh);
      VulnerabilityCompliance_po.getdoughnutS3Item().getText().then(function (s3){
        severity_total = severity_total + parseInt(s3, 10);
      });
      VulnerabilityCompliance_po.getdoughnutS4Item().getText().then(function (s4){
        severity_total = severity_total + parseInt(s4, 10);
      });
      VulnerabilityCompliance_po.getdoughnutS5Item().getText().then(function (s5){
        severity_total = severity_total + parseInt(s5, 10);
        expect(severity_total).toEqual(total);
      });
    });
  });

  it('verify csv download', () => {
    let download_successful = false;
    browser.wait(EC.visibilityOf( VulnerabilityCompliance_po.getAgGridSort()), timeOutHigh);
    const filename = process.cwd() + '/e2e/downloads/export.csv';
    const fs = require('fs');
    const myDir = process.cwd() + '/e2e/downloads';
    if (!VulnerabilityCompliance_po.checkDirExists(myDir)) {
      fs.mkdirSync(myDir);
    } else if ((fs.readdirSync(myDir).length) > 0 && fs.existsSync(filename)) {
      fs.unlinkSync(filename);
    }
    browser.wait(EC.visibilityOf(VulnerabilityCompliance_po.getdownloadIcon()), timeOutHigh);
    browser.wait(EC.elementToBeClickable(VulnerabilityCompliance_po.getdownloadIcon()), timeOutHigh);
    VulnerabilityCompliance_po.getdownloadIcon().click().then(function() {
      browser.sleep(2401);
      if (fs.existsSync(filename)) {
          download_successful = true;
          const fileContent = fs.readFileSync(filename, { encoding: 'utf8' });
          expect(fileContent.toString().indexOf('\n')).toBeGreaterThan(0);
      }
      expect(download_successful).toEqual(true);
      return fs.existsSync(filename);
    });
  });

  it('verify tabs count', () => {
    browser.wait(EC.visibilityOf( VulnerabilityCompliance_po.getTableFirstTab()), timeOutHigh);
    VulnerabilityCompliance_po.getTableFirstTab().getText().then(function(text) {
      const tab_cnt = text.replace('(', '').replace(')', '');
      browser.wait(EC.visibilityOf( VulnerabilityCompliance_po.tableTotal()), timeOutHigh);
      expect(VulnerabilityCompliance_po.tableTotal().getText()).toEqual(tab_cnt);
    });
  });

  it('verify filter with severity 3 in all vulnerabilities page', () => {
    browser.wait(EC.visibilityOf( VulnerabilityCompliance_po.getdoughnutS3Item()), timeOutHigh);
    browser.wait(EC.elementToBeClickable( VulnerabilityCompliance_po.getdoughnutS3Item()), timeOutHigh);
    VulnerabilityCompliance_po.getdoughnutS3Item().click();
    browser.wait(EC.visibilityOf( AllVulnerabilities_po.getFilters()), timeOutHigh);
    AllVulnerabilities_po.getFilters().getText().then(function(text) {
      expect(text).toContain('3');
      browser.wait(EC.visibilityOf( AllVulnerabilities_po.getBackArrow()), timeOutHigh);
      browser.wait(EC.elementToBeClickable(AllVulnerabilities_po.getBackArrow()), timeOutHigh);
      AllVulnerabilities_po.getBackArrow().click();
    });
  });

  it('Check if sum of all s3 in list table equals table total s3 in summary', () => {
    browser.wait(EC.visibilityOf(VulnerabilityCompliance_po.getdoughnutS3Item()), timeOutHigh);
    let total_s3 = 0;
    let each_s3 = 0;
    VulnerabilityCompliance_po.getdoughnutS3Item().getText().then(function (text) {
      total_s3 = parseInt(text.replace(/,/g, ''), 10);
    });
    browser.wait(EC.visibilityOf( VulnerabilityCompliance_po.getFirstRowCell()), timeOutHigh);
    VulnerabilityCompliance_po.getAllList().then(function(items) {
      for (let i = 1; i < items.length; i++) {
        browser.executeScript('arguments[0].scrollIntoView();', $('.list-table-inner-wrapper .list-table-each-list:nth-child(' + (i + 1) + ') .list-table-value .list-table-count-each:nth-child(1)').getWebElement());
        $('.list-table-inner-wrapper .list-table-each-list:nth-child(' + (i + 1) + ') .list-table-value .list-table-count-each:nth-child(1)').getText().then(function (text) {
          each_s3 = each_s3 + parseInt(text, 10);
          if ( i === items.length - 1) {
            expect(each_s3).toEqual(total_s3);
          }
        });
      }
    });
  });

  it('Check if sum of all s4 in list table equals table total s4 in summary', () => {
    browser.wait(EC.visibilityOf(VulnerabilityCompliance_po.getdoughnutS4Item()), timeOutHigh);
    let total_s4 = 0;
    let each_s4 = 0;
    VulnerabilityCompliance_po.getdoughnutS4Item().getText().then(function (text) {
      total_s4 = parseInt(text.replace(/,/g, ''), 10);
    });
    browser.wait(EC.visibilityOf( VulnerabilityCompliance_po.getFirstRowCell()), timeOutHigh);
    VulnerabilityCompliance_po.getAllList().then(function(items) {
      for (let i = 1; i < items.length; i++) {
        browser.executeScript('arguments[0].scrollIntoView();', $('.list-table-inner-wrapper .list-table-each-list:nth-child(' + (i + 1) + ') .list-table-value .list-table-count-each:nth-child(2)').getWebElement());
        $('.list-table-inner-wrapper .list-table-each-list:nth-child(' + (i + 1) + ') .list-table-value .list-table-count-each:nth-child(2)').getText().then(function (text) {
          each_s4 = each_s4 + parseInt(text, 10);
          if ( i === items.length - 1) {
            expect(each_s4).toEqual(total_s4);
          }
        });
      }
    });
  });

  it('Check if sum of all s5 in list table equals table total s5 in summary', () => {
    browser.wait(EC.visibilityOf(VulnerabilityCompliance_po.getdoughnutS5Item()), timeOutHigh);
    let total_s5 = 0;
    let each_s5 = 0;
    VulnerabilityCompliance_po.getdoughnutS5Item().getText().then(function (text) {
      total_s5 = parseInt(text.replace(/,/g, ''), 10);
    });
    browser.wait(EC.visibilityOf( VulnerabilityCompliance_po.getFirstRowCell()), timeOutHigh);
    VulnerabilityCompliance_po.getAllList().then(function(items) {
      for (let i = 1; i < items.length; i++) {
        browser.executeScript('arguments[0].scrollIntoView();', $('.list-table-inner-wrapper .list-table-each-list:nth-child(' + (i + 1) + ') .list-table-value .list-table-count-each:nth-child(3)').getWebElement());
        $('.list-table-inner-wrapper .list-table-each-list:nth-child(' + (i + 1) + ') .list-table-value .list-table-count-each:nth-child(3)').getText().then(function (text) {
          each_s5 = each_s5 + parseInt(text, 10);
          if ( i === items.length - 1) {
            expect(each_s5).toEqual(total_s5);
          }
        });
      }
    });
  });

});
