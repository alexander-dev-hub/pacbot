/*
 *Copyright 2018 T Mobile, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); You may not use
 * this file except in compliance with the License. A copy of the License is located at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { browser, protractor, $ } from 'protractor';
import { Menu } from '../page-objects/menu.po';
import { VulnerabilityReport } from '../page-objects/vulnerability-report.po';
import { AssetGroups } from '../page-objects/asset-groups.po';
import { CONFIGURATIONS } from './../../src/config/configurations';

const domain = CONFIGURATIONS.optional.general.e2e.DOMAIN;

const timeOutHigh = 180000;

describe('VulnerabilityReport', () => {
  let AssetGroups_po: AssetGroups;
  let menu_po: Menu;
  let VulnerabilityReport_po: VulnerabilityReport;
  const EC = protractor.ExpectedConditions;

  beforeAll(() => {
    AssetGroups_po = new AssetGroups();
    menu_po = new Menu();
    VulnerabilityReport_po = new VulnerabilityReport();
  });

  it('Verify title of vulnerability report', () => {
    browser.wait(EC.visibilityOf(menu_po.MenuClick()), timeOutHigh);
    browser.wait(EC.elementToBeClickable(menu_po.MenuClick()), timeOutHigh);
    menu_po.MenuClick().click();
    browser.wait(EC.visibilityOf(menu_po.VulnerabilityReportClick()), timeOutHigh);
    browser.wait(EC.elementToBeClickable(menu_po.VulnerabilityReportClick()), timeOutHigh);
    menu_po.VulnerabilityReportClick().click();
    browser.wait(EC.visibilityOf(VulnerabilityReport_po.getTitle()), timeOutHigh);
    expect(VulnerabilityReport_po.getTitle().getText()).toContain('Vulnerability Summary');
  });

  it('Check all the components are present', () => {
    browser.wait(EC.visibilityOf(VulnerabilityReport_po.getScanPercent()), timeOutHigh);
    browser.wait(EC.presenceOf(VulnerabilityReport_po.getActionsToRemediate()), timeOutHigh);
    browser.wait(EC.presenceOf(VulnerabilityReport_po.getPerformersTable()), timeOutHigh);
    browser.wait(EC.presenceOf(VulnerabilityReport_po.checkDistribution()), timeOutHigh);
    browser.wait(EC.presenceOf(VulnerabilityReport_po.checkTrend()), timeOutHigh);
    expect(VulnerabilityReport_po.getScanPercent().getText()).toContain('scan coverage');
  });

  it('Verify report calculation is opening', () => {
    browser.wait(EC.visibilityOf(VulnerabilityReport_po.getWorkflow()), timeOutHigh);
    browser.wait(EC.elementToBeClickable(VulnerabilityReport_po.getWorkflow()), timeOutHigh);
    VulnerabilityReport_po.getWorkflow().click();
    browser.wait(EC.visibilityOf(VulnerabilityReport_po.getWorkflowHeading()), timeOutHigh);
    expect(VulnerabilityReport_po.getWorkflowHeading().getText()).toEqual('Vulnerability Report Calculation Workflow');
    browser.wait(EC.visibilityOf(VulnerabilityReport_po.getWorkflowClose()), timeOutHigh);
    browser.wait(EC.elementToBeClickable(VulnerabilityReport_po.getWorkflowClose()), timeOutHigh);
    VulnerabilityReport_po.getWorkflowClose().click();
  });

  it('Verify actions to remediate details', () => {
    browser.wait(EC.presenceOf(VulnerabilityReport_po.getActionsToRemediate()), timeOutHigh);
    browser.executeScript('arguments[0].scrollIntoView();', VulnerabilityReport_po.getActionsToRemediate().getWebElement());
    browser.wait(EC.elementToBeClickable(VulnerabilityReport_po.getActionsToRemediate()), timeOutHigh);
    VulnerabilityReport_po.getActionsToRemediate().click();
    browser.wait(EC.visibilityOf(VulnerabilityReport_po.getPopHeading()), timeOutHigh);
    expect(VulnerabilityReport_po.getPopHeading().getText()).toEqual('Actions to Remediate');
    browser.wait(EC.visibilityOf(VulnerabilityReport_po.getClosePop()), timeOutHigh);
    browser.wait(EC.elementToBeClickable(VulnerabilityReport_po.getClosePop()), timeOutHigh);
    VulnerabilityReport_po.getClosePop().click();
  });

  it('Verify performers details', () => {
    browser.wait(EC.presenceOf(VulnerabilityReport_po.getPerformersTable()), timeOutHigh);
    browser.wait(EC.presenceOf(VulnerabilityReport_po.getPerformers()), timeOutHigh);
    browser.executeScript('arguments[0].scrollIntoView();', VulnerabilityReport_po.getPerformers().getWebElement());
    browser.wait(EC.elementToBeClickable(VulnerabilityReport_po.getPerformers()), timeOutHigh);
    VulnerabilityReport_po.getPerformers().click();
    browser.wait(EC.visibilityOf(VulnerabilityReport_po.getPopHeading()), timeOutHigh);
    expect(VulnerabilityReport_po.getPopHeading().getText()).toEqual('Highest & Lowest Performers');
    browser.wait(EC.visibilityOf(VulnerabilityReport_po.getClosePop()), timeOutHigh);
    browser.wait(EC.elementToBeClickable(VulnerabilityReport_po.getClosePop()), timeOutHigh);
    VulnerabilityReport_po.getClosePop().click();
  });

  it('Verify scan percentage and lying between 0 and 100', () => {
    browser.wait(EC.visibilityOf(VulnerabilityReport_po.getScanPercent()), timeOutHigh);
    let scan_percent;
    VulnerabilityReport_po.getScanPercent().getText().then(function(text) {
      scan_percent = parseInt(text, 10);
    });
    browser.wait(EC.visibilityOf(VulnerabilityReport_po.getAssetsScanned()), timeOutHigh);
    let assets_scanned;
    VulnerabilityReport_po.getAssetsScanned().getText().then(function(text) {
      assets_scanned = parseInt(text.replace(/,/g, ''), 10);
    });
    browser.wait(EC.visibilityOf(VulnerabilityReport_po.getAssetsNotScanned()), timeOutHigh);
    let assets_unscanned;
    VulnerabilityReport_po.getAssetsNotScanned().getText().then(function(text) {
      assets_unscanned = parseInt(text.replace(/,/g, ''), 10);
      expect(Math.floor((100 * assets_scanned) / (assets_scanned + assets_unscanned))).toEqual(scan_percent);
      let is_percent = false;
      if (scan_percent >= 0 && scan_percent <= 100) {
        is_percent = true;
      }
      expect(is_percent).toEqual(true);
    });
  });

  it('Check vulnerability summary validity', () => {
    let total_vulnerabilities;
    let total_assets;
    let total_occurrences;
    browser.wait(EC.presenceOf(VulnerabilityReport_po.getTotalVulnerabilities()), timeOutHigh);
    VulnerabilityReport_po.getTotalVulnerabilities().getText().then(function(text) {
      total_vulnerabilities = parseInt(text.replace(/,/g, ''), 10);
    });
    browser.wait(EC.presenceOf(VulnerabilityReport_po.getTotalVulnerabilities()), timeOutHigh);
    VulnerabilityReport_po.getTotalAssets().getText().then(function(text) {
      total_assets = parseInt(text.replace(/,/g, ''), 10);
    });
    browser.wait(EC.presenceOf(VulnerabilityReport_po.getTotalVulnerabilities()), timeOutHigh);
    VulnerabilityReport_po.getTotalOccurrences().getText().then(function(text) {
      total_occurrences = parseInt(text.replace(/,/g, ''), 10);
    });
    browser.wait(EC.presenceOf(VulnerabilityReport_po.checkDistribution()), timeOutHigh).then(function() {
      browser.sleep(4000);
      VulnerabilityReport_po.getDonuts().then(function(items) {
        for (let i = 1; i <= items.length; i++) {
            let vuln_lhs;
            let vuln_rhs;
            let assets_lhs;
            let assets_rhs;
            let occur_lhs;
            let occur_rhs;
            VulnerabilityReport_po.getDynamicElement(i, 2, 2).getText().then(function(eachText){
              vuln_lhs = parseInt(eachText.replace(/,/g, ''), 10);
            });
            VulnerabilityReport_po.getDynamicElement(i, 2, 3).getText().then(function(eachText){
              vuln_rhs = parseInt(eachText.replace(/,/g, ''), 10);
            });
            VulnerabilityReport_po.getDynamicElement(i, 3, 2).getText().then(function(eachText){
              assets_lhs = parseInt(eachText.replace(/,/g, ''), 10);
            });
            VulnerabilityReport_po.getDynamicElement(i, 3, 3).getText().then(function(eachText){
              assets_rhs = parseInt(eachText.replace(/,/g, ''), 10);
            });
            VulnerabilityReport_po.getDynamicElement(i, 4, 2).getText().then(function(eachText){
              occur_lhs = parseInt(eachText.replace(/,/g, ''), 10);
            });
            VulnerabilityReport_po.getDynamicElement(i, 4, 3).getText().then(function(eachText){
              occur_rhs = parseInt(eachText.replace(/,/g, ''), 10);
              expect(vuln_lhs + vuln_rhs).toEqual(total_vulnerabilities);
              expect(assets_lhs + assets_rhs).toEqual(total_assets);
              expect(occur_lhs + occur_rhs).toEqual(total_occurrences);
            });
        }
      });
    });
  });

  it('Change filters and verify components refresh', () => {
    browser.wait(EC.visibilityOf(VulnerabilityReport_po.filterClick()), timeOutHigh);
    browser.wait(EC.elementToBeClickable(VulnerabilityReport_po.filterClick()), timeOutHigh);
    VulnerabilityReport_po.filterClick().click();
    browser.wait(EC.visibilityOf(VulnerabilityReport_po.applyClick()), timeOutHigh);
    browser.wait(EC.elementToBeClickable(VulnerabilityReport_po.applyClick()), timeOutHigh);
    VulnerabilityReport_po.applyClick().click();
    browser.wait(EC.presenceOf(VulnerabilityReport_po.getScanPercent()), timeOutHigh);
    browser.wait(EC.presenceOf(VulnerabilityReport_po.getActionsToRemediate()), timeOutHigh);
    browser.wait(EC.presenceOf(VulnerabilityReport_po.getPerformersTable()), timeOutHigh);
    browser.wait(EC.presenceOf(VulnerabilityReport_po.checkDistribution()), timeOutHigh);
    browser.wait(EC.presenceOf(VulnerabilityReport_po.checkTrend()), timeOutHigh);
    expect(VulnerabilityReport_po.getScanPercent().getText()).toContain('scan coverage');
    browser.wait(EC.visibilityOf(VulnerabilityReport_po.filterClick()), timeOutHigh);
    browser.wait(EC.elementToBeClickable(VulnerabilityReport_po.filterClick()), timeOutHigh);
    VulnerabilityReport_po.filterClick().click();
    browser.wait(EC.visibilityOf(VulnerabilityReport_po.applyClick()), timeOutHigh);
    browser.wait(EC.elementToBeClickable(VulnerabilityReport_po.applyClick()), timeOutHigh);
    VulnerabilityReport_po.applyClick().click();
  });

  it('Verify change of asset group', () => {
    browser.get(domain + '/pl/(compliance/compliance-dashboard//modal:change-default-asset-group//modalBGMenu:vulnerability-report)?ag=aws-all&domain=Infra%20%26%20Platforms#dtd-vulnerability');
    browser.wait(EC.visibilityOf(AssetGroups_po.getAllPath()), timeOutHigh);
    browser.wait(EC.elementToBeClickable(AssetGroups_po.getAllPath()), timeOutHigh);
    AssetGroups_po.getAllPath().click();
    browser.wait(EC.visibilityOf(AssetGroups_po.getAssetGroupSearch()), timeOutHigh);
    browser.wait(EC.elementToBeClickable(AssetGroups_po.getAssetGroupSearch()), timeOutHigh);
    AssetGroups_po.getAssetGroupSearch().click();
    AssetGroups_po.getAssetGroupSearch().sendKeys('adapt');
    browser.sleep(100);
    browser.wait(EC.visibilityOf(AssetGroups_po.getFirstAssetGroup()), timeOutHigh);
    browser.wait(EC.visibilityOf(AssetGroups_po.clickFirstAssetGroup()), timeOutHigh);
    browser.wait(EC.elementToBeClickable(AssetGroups_po.clickFirstAssetGroup()), timeOutHigh);
    AssetGroups_po.clickFirstAssetGroup().click();
    browser.wait(EC.visibilityOf(AssetGroups_po.getSetDefault()), timeOutHigh);
    browser.wait(EC.elementToBeClickable(AssetGroups_po.getSetDefault()), timeOutHigh);
    AssetGroups_po.getSetDefault().click();
    browser.wait(EC.presenceOf(VulnerabilityReport_po.getScanPercent()), timeOutHigh);
    expect(VulnerabilityReport_po.getScanPercent().getText()).toContain('scan coverage');
    browser.wait(EC.presenceOf(VulnerabilityReport_po.getActionsToRemediate()), timeOutHigh);
    browser.wait(EC.presenceOf(VulnerabilityReport_po.getPerformersTable()), timeOutHigh);
    browser.wait(EC.presenceOf(VulnerabilityReport_po.checkDistribution()), timeOutHigh);
    browser.wait(EC.presenceOf(VulnerabilityReport_po.checkTrend()), timeOutHigh);
    browser.wait(EC.presenceOf(VulnerabilityReport_po.getAgSelected()), timeOutHigh);
    VulnerabilityReport_po.getAgSelected().getText().then(function(text) {
      expect(text.toLowerCase()).toContain('adapt');
      browser.get(domain + '/pl/(compliance/compliance-dashboard//modalBGMenu:vulnerability-report)?ag=aws-all&domain=Infra%20%26%20Platforms');
    });
  });

});
