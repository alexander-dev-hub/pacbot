/*
 *Copyright 2018 T Mobile, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); You may not use
 * this file except in compliance with the License. A copy of the License is located at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or
 * implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Created by sauravdutta on 27/11/17.
 */

import { Injectable, Inject } from '@angular/core';
import { Observable } from 'rxjs/Rx';
import 'rxjs/add/operator/toPromise';
import { HttpService } from '../../shared/services/http-response.service';

@Injectable()
export class VulnerabilityTrendService {

    getMethod: any;

    constructor( @Inject(HttpService) private httpService: HttpService) { }

    getData(payload, vulnerabilityUrl, vulnerabilityMethod): Observable<any> {
        const url = vulnerabilityUrl;
        const method = vulnerabilityMethod;
        const queryParams = {};
        this.getMethod = vulnerabilityMethod;
        try {
            return Observable.combineLatest(
                this.httpService.getHttpResponse(url, method, payload, queryParams)
                    .map(response => this.massageData(response) )
                    .catch(this.handleError)
            );
        } catch (error) {
            this.handleError(error);
        }
    }

    handleError(error: any): Observable<any> {
        return Observable.throw(error.message || error);
    }

    massageData(data): any {
        if (this.getMethod === 'POST') {
            data = data.data.trend;

            data.sort(function(a, b) {
                return new Date(a.date).getTime() - new Date(b.date).getTime();
            });
            const values = [];
            for (let i = 0; i < data.length; i++) {
                let zero_value;
                let obj;
                if (data[i].count === 0) {
                    zero_value = true;
                } else {
                    zero_value = false;
                }
                if (data[i].count != null) {
                    obj = {
                        'date': new Date(data[i].date),
                        'value': data[i].count,
                        'zero_value': zero_value
                    };
                    values.push(obj);
                }
            }
            const finalObj = {
                'key': 'Vulnerability Count',
                'values': values
            };
            return finalObj;
        } else {
            return data.hits;
        }
    }
}
