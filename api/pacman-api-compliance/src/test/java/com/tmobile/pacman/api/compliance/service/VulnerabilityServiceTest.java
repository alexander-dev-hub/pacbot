/*******************************************************************************
 * Copyright 2018 T Mobile, Inc. or its affiliates. All Rights Reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/
package com.tmobile.pacman.api.compliance.service;

import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.junit.Assert.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyObject;
import static org.mockito.Matchers.anyString;
import static org.powermock.api.mockito.PowerMockito.when;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.powermock.modules.junit4.PowerMockRunner;
import org.springframework.test.util.ReflectionTestUtils;

import com.tmobile.pacman.api.commons.Constants;
import com.tmobile.pacman.api.commons.exception.DataException;
import com.tmobile.pacman.api.commons.exception.ServiceException;
import com.tmobile.pacman.api.commons.utils.CommonUtils;
import com.tmobile.pacman.api.compliance.client.AssetServiceClient;
import com.tmobile.pacman.api.compliance.domain.AssetApi;
import com.tmobile.pacman.api.compliance.domain.AssetApiData;
import com.tmobile.pacman.api.compliance.domain.AssetCount;
import com.tmobile.pacman.api.compliance.domain.AssetCountByAppEnvDTO;
import com.tmobile.pacman.api.compliance.domain.AssetCountDTO;
import com.tmobile.pacman.api.compliance.domain.AssetCountData;
import com.tmobile.pacman.api.compliance.domain.Request;
import com.tmobile.pacman.api.compliance.domain.ResponseWithOrder;
import com.tmobile.pacman.api.compliance.repository.VulnerabilityRepository;
import com.tmobile.pacman.api.compliance.repository.VulnerabilityTrendGenerator;

@RunWith(PowerMockRunner.class)
public class VulnerabilityServiceTest {

    @InjectMocks
    VulnerabilityService vulnerabilityService;
    
    @Mock
    VulnerabilityRepository vulnerabilityRepository;
    
    @Mock
    AssetServiceClient assetServiceClient;
    
    @Mock
    VulnerabilityTrendGenerator vulnTrendGenerator;
    
    @Mock
    ComplianceService complianceService;
    
    @Mock
    CommonUtils commonUtils;
    
    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        
        AssetApi assetApi = new AssetApi();
        AssetApiData data = new AssetApiData();
        
        List<AssetCountDTO> ttypes = new ArrayList<>();
        AssetCountDTO tt = new AssetCountDTO();
        tt.setType("ec2");
        ttypes.add(tt);
        tt = new AssetCountDTO();
        tt.setType("onpremserver");
        ttypes.add(tt);
        
        data.setTargettypes(ttypes.toArray(new AssetCountDTO[ttypes.size()]));
        assetApi.setData(data);
        
        when(assetServiceClient.getTargetTypeList(anyString(),anyObject())).thenReturn(assetApi);
    }
    
    @Test
    public void getVulnerabilitiesDetailsTest() throws Exception {
        
        List<Map<String, Object>> vulnerabilitiesData = new ArrayList<>();
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "ec2");
        when(vulnerabilityRepository.getAssetsAffectedCount(anyString(),
                        anyObject(), anyString())).thenReturn(new HashMap<>());
        when (vulnerabilityRepository.getAllVulnerabilities(anyObject())).thenReturn(vulnerabilitiesData);
        assertThat(vulnerabilityService.getVulnerabilitiesDetails("ag", null),
                is(notNullValue()));
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "test");
        assertThat(vulnerabilityService.getVulnerabilitiesDetails("ag", null),
                is(notNullValue()));
        
        Map<String,Object> vuln = new HashMap<>();
        vuln.put("qid", "123");
        vuln.put("assetsAffected", 1);
        vuln.put(Constants.TITLE, "test");
        vuln.put(Constants.SEVEITY_LEVEL, "3");
        vuln.put(Constants.CATEGORY, "test");
        vuln.put(Constants.VULN_TYPE, "type");
        vuln.put(Constants.PATCHABLE, "1");
        vulnerabilitiesData.add(vuln);
        
        vuln = new HashMap<>();
        vuln.put("qid", "456");
        vuln.put("assetsAffected", 2);
        vuln.put(Constants.TITLE, "test");
        vuln.put(Constants.SEVEITY_LEVEL, "5");
        vuln.put(Constants.CATEGORY, "test");
        vuln.put(Constants.VULN_TYPE, "type");
        vuln.put(Constants.PATCHABLE, "0");
        vulnerabilitiesData.add(vuln);
        
        vuln = new HashMap<>();
        vuln.put("qid", "789");
        vuln.put("assetsAffected", 2);
        vuln.put(Constants.TITLE, "test");
        vuln.put(Constants.SEVEITY_LEVEL, "5");
        vuln.put(Constants.CATEGORY, "test");
        vuln.put(Constants.VULN_TYPE, "type");
        vulnerabilitiesData.add(vuln);
        
        Map<String,Long> assetsAffected = new HashMap<String, Long>();
        assetsAffected.put("123", 10L);
        assetsAffected.put("456", 10L);
        assetsAffected.put("789", 10L);
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "ec2,onpremserver");
        when(vulnerabilityRepository.getAssetsAffectedCount(anyString(),
                        anyObject(), anyString())).thenReturn(assetsAffected);
        when (vulnerabilityRepository.getAllVulnerabilities(anyObject())).thenReturn(vulnerabilitiesData);
        assertThat(vulnerabilityService.getVulnerabilitiesDetails("ag", null),
                is(notNullValue()));
    }
    
    @Test
    public void getVulnerabilitiesDetailsTest_Exception() throws Exception {
        
        when(vulnerabilityRepository.getAssetsAffectedCount(anyString(),
                        anyObject(), anyString())).thenReturn(new HashMap<>());
        when (vulnerabilityRepository.getAllVulnerabilities(anyObject())).thenThrow(new DataException());
        assertThatThrownBy(
                () -> vulnerabilityService.getVulnerabilitiesDetails("ag", null)).isInstanceOf(Exception.class);
    }
    
    @Test
    public void getVulnerabilitySummaryTest() throws Exception {
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "test");
        assertThat(vulnerabilityService.getVulnerabilitySummary("ag","3,4,5"),
                is(notNullValue()));
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "ec2");
        when(vulnerabilityRepository.getUniqueHost(anyString(),anyString())).thenReturn(new HashMap<String, Object>());
        when(vulnerabilityRepository.getVulnInfo(anyString(),anyString())).thenReturn(new HashMap<String, Object>());
        when(vulnerabilityRepository.getUniqueApp(anyString())).thenReturn(new HashMap<String, Object>());
        
        AssetCount totalAssets = new AssetCount();
        AssetCountData data = new AssetCountData();
        
        AssetCountByAppEnvDTO assetCount_Count = new AssetCountByAppEnvDTO();
        assetCount_Count.setType("onpremserver");
        assetCount_Count.setCount("1");
        
        List<AssetCountByAppEnvDTO> assetAppEnvDTOs = new ArrayList<AssetCountByAppEnvDTO>();
        assetAppEnvDTOs.add(assetCount_Count);
        data.setAssetcount(assetAppEnvDTOs.toArray(new AssetCountByAppEnvDTO[assetAppEnvDTOs.size()]));
        totalAssets.setData(data);
        
        ResponseWithOrder responseWithOrder = new ResponseWithOrder();
        List<LinkedHashMap<String, Object>> response = new ArrayList<>();
        LinkedHashMap<String, Object> obj = new LinkedHashMap<>();
        obj.put("assetsScanned", 1);
        obj.put("passed", 1);
        response.add(obj);
        responseWithOrder.setResponse(response );
        when(complianceService.getRulecompliance(any(Request.class))).thenReturn(responseWithOrder);
        when(vulnerabilityRepository.getTotalQualysHostCount(anyString(), anyString())).thenReturn(1L);
        ReflectionTestUtils.setField(vulnerabilityService, "vulnSummarySeverity", "3");
        
        Map<String, Object> vulnSummary = new HashMap<>();
        List<Map<String,Object>> severityInfo = new ArrayList<>();
        Map<String,Object> severity = new HashMap<>();
        severity.put(Constants.SEVEITY_LEVEL, 3);
        severity.put(Constants.COUNT, 2);
        severity.put(Constants.VULN_COUNT, 2);
        severityInfo.add(severity);
        severity = new HashMap<>();
        severity.put(Constants.SEVEITY_LEVEL, 4);
        severity.put(Constants.COUNT, 2);
        severity.put(Constants.VULN_COUNT, 2);
        severityInfo.add(severity);
        severity = new HashMap<>();
        severity.put(Constants.SEVEITY_LEVEL, 5);
        severity.put(Constants.COUNT, 2);
        severity.put(Constants.VULN_COUNT, 2);
        severityInfo.add(severity);        
        
        vulnSummary.put("severityInfo", severityInfo);
        assertThat(vulnerabilityService.getVulnerabilitySummary("ag","3,4,5"),is(notNullValue()));
        
        
        Map<String,Object> uniqueHost = new HashMap<>();
        uniqueHost.put("total", 10);
        uniqueHost.put("3", 1);
        Map<String,Object> vulnInfo = new HashMap<>();
        Map<String,Object> vulnInfoMap = new HashMap<>();
        vulnInfoMap.put(Constants.VULN_COUNT,2);
        vulnInfoMap.put(Constants.UNIQUE_VULN_COUNT,2);
        vulnInfo.put("total", 10);
        vulnInfo.put("3", vulnInfoMap);
        Map<String,Object> uniqueApp = new HashMap<>();
        uniqueApp.put("3", 1);
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "ec2,onpremserver");
        when(vulnerabilityRepository.getUniqueHost(anyString(),anyString())).thenReturn(uniqueHost);
        when(vulnerabilityRepository.getVulnInfo(anyString(),anyString())).thenReturn(vulnInfo);
        when(vulnerabilityRepository.getUniqueApp(anyString())).thenReturn(uniqueApp);
        
        when(complianceService.getRulecompliance(any(Request.class))).thenReturn(responseWithOrder);
        when(assetServiceClient.getTotalAssetsCount(anyString(), anyString(), anyString())).thenReturn(totalAssets);
        when(vulnerabilityRepository.getTotalQualysHostCount(anyString(), anyString())).thenReturn(1L);
        ReflectionTestUtils.setField(vulnerabilityService, "vulnSummarySeverity", "3");
        
        vulnSummary.put("severityInfo", severityInfo);
       
        assertThat(vulnerabilityService.getVulnerabilitySummary("ag","3"),is(notNullValue()));
        
    }
    
    @Test
    public void getVulnerabilitySummaryTest_Exception() throws Exception {
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "ec2");
        when(vulnerabilityRepository.getUniqueHost(anyString(),anyString())).thenReturn(new HashMap<String, Object>());
        when(vulnerabilityRepository.getVulnInfo(anyString(),anyString())).thenReturn(new HashMap<String, Object>());
        when(vulnerabilityRepository.getUniqueApp(anyString())).thenReturn(new HashMap<String, Object>());
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnSummarySeverity", "3");
        when(complianceService.getRulecompliance(any(Request.class))).thenThrow(new ServiceException());
        assertThatThrownBy(
        () -> vulnerabilityService.getVulnerabilitySummary("ag","3,4,5")).isInstanceOf(ServiceException.class);
    }
    
    @Test
    public void getVulnerabilityByAppAndEnvTest() throws Exception {
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "ec2");
        when(vulnerabilityRepository.getVulnerabilyAcrossAppAndEnv(anyString(), anyObject(),
                        anyString(), anyString(), anyString())).thenReturn(new ArrayList<>());
        assertThat(vulnerabilityService.getVulnerabilityByAppAndEnv("ag","filter","app"),
                is(notNullValue()));
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "test");
        assertThat(vulnerabilityService.getVulnerabilityByAppAndEnv("ag","filter","app").size(),
                is(0));
    }
    
    @Test
    public void getVulnerabilityTrendTest() throws Exception {
        
        when(vulnerabilityRepository.getVulnerabilityTrend(anyString(),
                anyObject(), anyObject(), anyObject())).thenReturn(new ArrayList<>());
        assertThat(vulnerabilityService.getVulnerabilityTrend("ag",null,new Date(),new Date()),
                is(notNullValue()));
    }
    
    @Test
    public void getVulnerabilityNewOpenTrendTest() throws Exception {
        
        when(vulnTrendGenerator.generateTrend(anyString(),
                anyString(), anyObject())).thenReturn(new ArrayList<>());
        assertThat(vulnerabilityService.getVulnerabilityNewOpenTrend("ag","sev",new Date()),
                is(notNullValue()));
    }
    
    @Test
    public void getVulnerabilitiesDistributionTest() throws Exception {
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "ec2");
        when(vulnerabilityRepository.getVulnerabilitiesDistribution(anyString(),anyString())).thenReturn(new ArrayList<>());
        assertThat(vulnerabilityService.getVulnerabilitiesDistribution("ag"),
                is(notNullValue()));
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "test");
        assertThat(vulnerabilityService.getVulnerabilitiesDistribution("ag").size(),
                is(0));
    }
    
    /*@SuppressWarnings("static-access")
    @Test
    public void filterMatchingCollectionElementsTest() throws Exception {
        
        when(commonUtils.filterMatchingCollectionElements(anyObject(),
                anyObject(), anyObject())).thenReturn(new Object());
        assertThat(vulnerabilityService.filterMatchingCollectionElements(new ArrayList<>(),"sev",true),
                is(notNullValue()));
    }*/
    
    @Test
    public void getVulnerabilitysummaryByResourceIdTest() throws Exception {
        
        when(vulnerabilityRepository.getVulnerabilitysummaryByResourceId(anyString())).thenReturn(new HashMap<>());
        assertThat(vulnerabilityService.getVulnerabilitysummaryByResourceId("id"),
                is(notNullValue()));
    }
    
    @Test
    public void getVulnerabilityDetailsByResourceIdTest() throws Exception {
        
        List<Map<String, Object>> vulnerabilitiesData = new ArrayList<>();
        
        Map<String,Object> vuln = new HashMap<>();
        vuln.put("qid", "123");
        vuln.put("assetsAffected", 1);
        vuln.put(Constants.TITLE, "test");
        vuln.put(Constants.SEVEITY_LEVEL, "3");
        vuln.put(Constants.CATEGORY, "test");
        vuln.put(Constants.VULN_TYPE, "type");
        vuln.put(Constants.PATCHABLE, "1");
        vulnerabilitiesData.add(vuln);
        
        when(vulnerabilityRepository.getVulnerabilityDetailsByResourceId(anyString())).thenReturn(vulnerabilitiesData);
        assertThat(vulnerabilityService.getVulnerabilityDetailsByResourceId("id"),
                is(notNullValue()));
        
        vuln = new HashMap<>();
        vuln.put("qid", "123");
        vuln.put("assetsAffected", 1);
        vulnerabilitiesData.add(vuln);
        
        when(vulnerabilityRepository.getVulnerabilityDetailsByResourceId(anyString())).thenReturn(vulnerabilitiesData);
        assertThatThrownBy(
                () -> vulnerabilityService.getVulnerabilityDetailsByResourceId("id")).isInstanceOf(Exception.class);
    }
    
    @Test
    public void getVulnerabilityDistributionSummaryTest() throws Exception {
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "ec2");
        when(vulnerabilityRepository.getVulnerabilyAcrossAppAndEnv(anyString(),
                anyString(), anyString(), anyString(),anyString())).thenReturn(getApps());
        when(vulnerabilityRepository.fetchExecDirectorApps()).thenReturn(fetchExecDirectorApps());
        
        assertThat(vulnerabilityService.getVulnerabilityDistributionSummary("ag","3"),
                is(notNullValue()));
        assertThat(vulnerabilityService.getVulnerabilityDistributionSummary("ag",null),
                is(notNullValue()));
    }
    
    @Test
    public void getAgingSummaryTest() throws Exception {
        
        when(vulnerabilityRepository.getAgingSummary(anyString())).thenReturn(new ArrayList<>());
        assertThat(vulnerabilityService.getAgingSummary("ag"),
                is(notNullValue()));
    }
    
    @Test
    public void getAgingDistributionSummaryTest() throws Exception {
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "ec2");
        when(vulnerabilityRepository.getAgingByApplication(anyString(),anyString(),anyString())).thenReturn(getApps());
        when(vulnerabilityRepository.fetchExecDirectorApps()).thenReturn(fetchExecDirectorApps());
        
        assertThat(vulnerabilityService.getAgingDistributionSummary("ag","3"),
                is(notNullValue()));
        assertThat(vulnerabilityService.getAgingDistributionSummary("ag",null),
                is(notNullValue()));
    }
    
    @Test
    public void getAgingDistributionSummaryTest_Exception() throws Exception {
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "test");
        when(vulnerabilityRepository.getAgingByApplication(anyString(),anyString(),anyString())).thenReturn(getApps());
        when(vulnerabilityRepository.fetchExecDirectorApps()).thenReturn(fetchExecDirectorApps());
        assertThat(vulnerabilityService.getAgingDistributionSummary("ag","3"),
                is(notNullValue()));
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "ec2");
        when(vulnerabilityRepository.getAgingByApplication(anyString(),anyString(),anyString())).thenThrow(new Exception());
        assertThat(vulnerabilityService.getAgingDistributionSummary("ag","3"),
                is(notNullValue()));
    }
    
    @Test
    public void getVulnerabilityByQidTest() throws Exception {
        
        Map<String,Object> vuln = new HashMap<>();
        vuln.put("qid", "123");
        vuln.put("vulntype", "type");
        vuln.put("severitylevel", "3");
        vuln.put("title", "test");
        vuln.put("category", "");
        vuln.put("lastservicemodificationdatetime", "1234");
        vuln.put("publisheddatetime", "123");
        vuln.put("patchable", "1");
        Map<String,Object> softwarelist = new HashMap<>();
        List<Map<String,Object>> softwares = new ArrayList<>();
        Map<String,Object> innerMap = new HashMap<>();
        innerMap.put("test","test");
        innerMap.put("test", "test");
        softwares.add(innerMap);
        softwarelist.put("software", softwares);
        vuln.put("softwarelist", softwarelist);
        Map<String,Object> vendorreferencelist = new HashMap<>();
        List<Map<String,Object>> vendorreference = new ArrayList<>();
        vendorreference.add(innerMap);
        vendorreferencelist.put("vendorreference", vendorreference);
        vuln.put("vendorreferencelist", vendorreferencelist);
        vuln.put("diagnosis", "test");
        vuln.put("consequence", "test");
        vuln.put("solution", "test");
        Map<String,Object> bugtraqlist = new HashMap<>();
        List<Map<String,Object>> bugtraq = new ArrayList<>();
        bugtraq.add(innerMap);
        bugtraqlist.put("vendorreference", bugtraq);
        vuln.put("bugtraqlist", bugtraqlist);
        vuln.put("pciflag", 0);
        Map<String,Object> pcireasons = new HashMap<>();
        List<Map<String,Object>> pcireason = new ArrayList<>();
        pcireason.add(innerMap);
        pcireasons.put("pcireason", pcireason);
        vuln.put("pcireasons", pcireasons);
        Map<String,Object> authtypelist = new HashMap<>();
        List<Map<String,Object>> authtype = new ArrayList<>();
        authtype.add(innerMap);
        authtypelist.put("authtype", authtype);
        Map<String,Object> discovery = new HashMap<>();
        discovery.put("authtypelist", authtypelist);
        discovery.put("additionalinfo", "Patch Available");
        vuln.put("discovery", discovery);
        vuln.put("supportedmodules", "test");
        Map<String,Object> cvelist = new HashMap<>();
        List<Map<String,Object>> cve = new ArrayList<>();
        cve.add(innerMap);
        cvelist.put("cve", cve);
        vuln.put("cvelist", cvelist);
        Map<String,Object> cvss = new HashMap<>();
        cvss.put("base", 1);
        cvss.put("temporal", 1);
        vuln.put("cvssv3", cvss);
        Map<String,Object> access = new HashMap<>();
        access.put("vector", 1);
        cvss.put("access", access);
        vuln.put("cvss", cvss);
        
        when(vulnerabilityRepository.getVulnerabilityByQid(anyString())).thenReturn(vuln);
        assertThat(vulnerabilityService.getVulnerabilityByQid("id"),
                is(notNullValue()));
        
        vuln = new HashMap<>();
        discovery = new HashMap<>();
        discovery.put("additionalinfo", "test");
        vuln.put("discovery", discovery);
        vuln.put("pciflag", 1);
        
        when(vulnerabilityRepository.getVulnerabilityByQid(anyString())).thenReturn(vuln);
        assertThat(vulnerabilityService.getVulnerabilityByQid("id"),
                is(notNullValue()));
        
        when(vulnerabilityRepository.getVulnerabilityByQid(anyString())).thenReturn(new HashMap<>());
        assertThat(vulnerabilityService.getVulnerabilityByQid("id"),
                is(notNullValue()));
    }
    
    @Test
    public void getHighestLowestPerformersTest() throws Exception {
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "test");
        when(vulnerabilityRepository.fetchExecDirectorApps()).thenReturn(fetchExecDirectorApps());
        assertThat(vulnerabilityService.getHighestLowestPerformers("ag", null,"org"),is(notNullValue()));
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "ec2");
        when(vulnerabilityRepository.getAppsBySeverity(anyString(),anyString(),anyString())).thenReturn(new HashMap<>());
        when(vulnerabilityRepository.fetchExecDirectorApps()).thenReturn(fetchExecDirectorApps());
        assertThat(vulnerabilityService.getHighestLowestPerformers("ag", null,"org"),is(notNullValue()));
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "ec2,onpremserver");
        Map<String,Long> apps = new HashMap<>();
        apps.put("app1", 1L);
        apps.put("app2", 2L);
        apps.put("app3", 3L);
        when(vulnerabilityRepository.getAppsBySeverity(anyString(),anyString(),anyString())).thenReturn(apps);
        when(vulnerabilityRepository.fetchExecDirectorApps()).thenReturn(fetchExecDirectorApps());
        assertThat(vulnerabilityService.getHighestLowestPerformers("ag", "3","org"),is(notNullValue()));
        
    }
    
    @Test
    public void getHighestLowestPerformersTest_Exception() throws Exception {
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "ec2");
        when(vulnerabilityRepository.getAppsBySeverity(anyString(),anyString(),anyString())).thenThrow(new Exception());
        assertThat(vulnerabilityService.getHighestLowestPerformers("ag", "3","org"),is(notNullValue()));
    }
    
    @Test
    public void getDistributionSummaryByInfraTypeTest() throws Exception {
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "ec2,onpremserver");
        Map<String,Object> infraInfo = new HashMap<>();
        infraInfo.put(Constants.TOTAL_VULN_ASSETS,1);
        infraInfo.put(Constants.VULNEREBILITIES,1);
        infraInfo.put(Constants.UNIQUE_VULN_COUNT,1);
        when(vulnerabilityRepository.getDistributionSummaryByInfraType(anyString(),anyString(),anyString())).thenReturn(infraInfo);
        assertThat(vulnerabilityService.getDistributionSummaryByInfraType("ag",null),is(notNullValue()));
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "ec2");
        when(vulnerabilityRepository.getDistributionSummaryByInfraType(anyString(),anyString(),anyString())).thenReturn(infraInfo);
        assertThat(vulnerabilityService.getDistributionSummaryByInfraType("ag","3"),is(notNullValue()));
    }
    
    @Test
    public void getDistributionSummaryByInfraTypeTest_Exception() throws Exception {
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "ec2");
        when(vulnerabilityRepository.getDistributionSummaryByInfraType(anyString(),anyString(),anyString())).thenThrow(new DataException());
        assertThatThrownBy(
                () -> vulnerabilityService.getDistributionSummaryByInfraType("ag","3")).isInstanceOf(ServiceException.class);
    }
    
    @Test
    public void getDistributionSummaryByEnvTest() throws Exception {
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "ec2,onpremserver");
        
        Map<String, Long> prodInfo = new HashMap<>();
        prodInfo.put("totalVulnerableAssets", 1L);
        prodInfo.put(Constants.VULNEREBILITIES, 1L);
        prodInfo.put("uniqueVulnCount", 1L);
        
        Map<String,Long> nonProdInfo = new HashMap<>();
        nonProdInfo.put("totalVulnerableAssets", 1L);
        nonProdInfo.put(Constants.VULNEREBILITIES, 1L);
        nonProdInfo.put("uniqueVulnCount", 1L);
        
        when(vulnerabilityRepository.getProdInfoByEnv(anyString(), anyString())).thenReturn(prodInfo);
        when(vulnerabilityRepository.getNonProdInfoByEnv(anyString(), anyString())).thenReturn(nonProdInfo);
        assertThat(vulnerabilityService.getDistributionSummaryByEnv("ag","3"),is(notNullValue()));
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "ec2");
        
        prodInfo = new HashMap<>();
        prodInfo.put("totalVulnerableAssets", 0L);
        prodInfo.put(Constants.VULNEREBILITIES, 0L);
        prodInfo.put("uniqueVulnCount", 0L);
        
        nonProdInfo = new HashMap<>();
        nonProdInfo.put("totalVulnerableAssets", 0L);
        nonProdInfo.put(Constants.VULNEREBILITIES, 0L);
        nonProdInfo.put("uniqueVulnCount", 0L);
        
        when(vulnerabilityRepository.getProdInfoByEnv(anyString(), anyString())).thenReturn(prodInfo);
        when(vulnerabilityRepository.getNonProdInfoByEnv(anyString(), anyString())).thenReturn(nonProdInfo);
        assertThat(vulnerabilityService.getDistributionSummaryByEnv("ag",""),is(notNullValue()));
    }
    
    @Test
    public void getDistributionSummaryByEnvTest_Exception() throws Exception {
        
        ReflectionTestUtils.setField(vulnerabilityService, "vulnTypes", "ec2");
        Map<String, Long> prodInfo = new HashMap<>();
        prodInfo.put("totalVulnerableAssets", 1L);
        prodInfo.put("uniqueVulnCount", 1L);
        
        Map<String,Long> nonProdInfo = new HashMap<>();
        nonProdInfo.put("totalVulnerableAssets", 1L);
        nonProdInfo.put(Constants.VULNEREBILITIES, 1L);
        nonProdInfo.put("uniqueVulnCount", 1L);
        
        when(vulnerabilityRepository.getProdInfoByEnv(anyString(), anyString())).thenReturn(prodInfo);
        when(vulnerabilityRepository.getNonProdInfoByEnv(anyString(), anyString())).thenReturn(nonProdInfo);
        assertThatThrownBy(
                () -> vulnerabilityService.getDistributionSummaryByEnv("ag","3")).isInstanceOf(ServiceException.class);
    }
    
    @Test
    public void getDistributionSummaryByVulnTypeTest() throws Exception {
        
        when(vulnerabilityRepository.getDistributionSummaryByVulnType(anyString(), anyString())).thenReturn(new ArrayList<>());
        assertThat(vulnerabilityService.getDistributionSummaryByVulnType("ag","3"),is(notNullValue()));
        
        when(vulnerabilityRepository.getDistributionSummaryByVulnType(anyString(), anyString())).thenReturn(new ArrayList<>());
        assertThat(vulnerabilityService.getDistributionSummaryByVulnType("ag",null),is(notNullValue()));
    }
    
    @Test
    public void getRemediationActionsSummaryTest() throws Exception {
        
        Map<String,Object> qids = new HashMap<>();
        qids.put("123~title~OS", 2);
        qids.put("123~EOL/Obsolete~Infra", 2);
        qids.put("11925~title~Infra", 2);
        qids.put("370914~title~Infra", 2);
        qids.put("123~Java Debug Wire Protocol~Infra", 0);
        qids.put("123~Java JMX Server Insecure Configuration~Infra", 2);
        qids.put("123~Java~Infra", 2);
        qids.put("123~title~Infra", 2);
        when(vulnerabilityRepository.getAllQidByAG(anyString(),anyString())).thenReturn(qids);
        assertThat(vulnerabilityService.getRemediationActionsSummary("ag",null),is(notNullValue()));
    }
    
    private List<Map<String,Object>> getApps() {
        
        List<Map<String, Object>> vulnApplications = new ArrayList<>();
        List<Map<String, Object>> severityInfo = new ArrayList<>();
 
        Map<String,Object> severity = new HashMap<>();
        severity.put(Constants.SEVERITY, "S3");
        severity.put(Constants.COUNT, 3);
        severity.put("days", 3);
        severityInfo.add(severity);
        severity = new HashMap<>();
        severity.put(Constants.SEVERITY, "S4");
        severity.put(Constants.COUNT, 4);
        severity.put("days", 4);
        severityInfo.add(severity);
        severity = new HashMap<>();
        severity.put(Constants.SEVERITY, "S5");
        severity.put(Constants.COUNT, 5);
        severity.put("days", 5);
        severityInfo.add(severity);
        
        Map<String, Object> vulnApp = new HashMap<>();
        vulnApp.put("application", "app1");
        vulnApp.put(Constants.SEV_INFO, severityInfo);
        vulnApplications.add(vulnApp);
        
        vulnApp = new HashMap<>();
        vulnApp.put("application", "app2");
        vulnApp.put(Constants.SEV_INFO, severityInfo);
        vulnApplications.add(vulnApp);
        
        vulnApp = new HashMap<>();
        vulnApp.put("application", "app3");
        vulnApp.put(Constants.SEV_INFO, severityInfo);
        vulnApplications.add(vulnApp);
        return vulnApplications;
    }
    
    private List<Map<String,Object>> fetchExecDirectorApps() {
        
        List<Map<String,Object>> apps = new ArrayList<>();
        Map<String,Object> app = new HashMap<>();
        app.put("appTag", "app1");
        app.put("director", "director1");
        app.put("executiveSponsor", "executiveSponsor1");
        apps.add(app);
        
        app = new HashMap<>();
        app.put("appTag", "app1");
        app.put("director", "director3");
        app.put("executiveSponsor", "executiveSponsor3");
        apps.add(app);
        
        app = new HashMap<>();
        app.put("appTag", "app2");
        app.put("director", "director2");
        app.put("executiveSponsor", "executiveSponsor2");
        apps.add(app);
        
        app = new HashMap<>();
        app.put("appTag", "app2");
        app.put("director", "");
        app.put("executiveSponsor", "");
        apps.add(app);
        
        app = new HashMap<>();
        app.put("appTag", "app3");
        app.put("director", "director3");
        app.put("executiveSponsor", "executiveSponsor3");
        apps.add(app);
        
        app = new HashMap<>();
        app.put("appTag", "app3");
        app.put("director", "director1");
        app.put("executiveSponsor", "executiveSponsor1");
        apps.add(app);
        
        app = new HashMap<>();
        app.put("appTag", "app3");
        app.put("director", null);
        app.put("executiveSponsor", null);
        apps.add(app);
        
        return apps;
    }
    
}
