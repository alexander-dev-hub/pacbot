/*******************************************************************************
 * Copyright 2018 T Mobile, Inc. or its affiliates. All Rights Reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/
package com.tmobile.pacman.api.compliance.repository;

import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;
import static org.mockito.Matchers.anyObject;
import static org.mockito.Matchers.anyString;
import static org.powermock.api.mockito.PowerMockito.mockStatic;
import static org.powermock.api.mockito.PowerMockito.when;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.springframework.test.util.ReflectionTestUtils;

import com.tmobile.pacman.api.commons.Constants;
import com.tmobile.pacman.api.commons.exception.DataException;
import com.tmobile.pacman.api.commons.repo.ElasticSearchRepository;
import com.tmobile.pacman.api.commons.repo.PacmanRdsRepository;
import com.tmobile.pacman.api.commons.utils.PacHttpUtils;

@RunWith(PowerMockRunner.class)
@PrepareForTest({PacHttpUtils.class})
public class VulnerabilityRepositoryTest {

    @InjectMocks
    private VulnerabilityRepository vulnerabilityRepository;
    
    @Mock
    private ElasticSearchRepository elasticSearchRepository;
    
    @Mock
    private PacmanRdsRepository rdsRepository;
    
    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }
    
    @Test
    public void getAllVulnerabilitiesTest() throws Exception {
        
        String response = "{\"hits\":{\"total\":68,\"hits\":[{\"_index\":\"qualys-kb\",\"_type\":\"kb\",\"_id\":\"236591\",\"_score\":8.899231,"
                + "\"_source\":{\"qid\":\"236591\",\"vulntype\":\"Vulnerability\",\"severitylevel\":4,\"title\":\"Red Hat Update for kernel\","
                + "\"category\":\"RedHat\",\"lastservicemodificationdatetime\":\"2018-05-29T20:32:16z\",\"publisheddatetime\":\"2018-01-04T04:02:43z\","
                + "\"_loadDate\":\"2018-07-09T14:23:27z\",\"latest\":true,\"classification\":\"OS\"}}]}}";
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenReturn(response);
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        when(elasticSearchRepository.processResponseAndSendTheScrollBack(anyString(), anyObject())).thenCallRealMethod();
        
        List<Map<String, Object>>  vulnerabilities = vulnerabilityRepository.getAllVulnerabilities(new ArrayList<>());
        assertTrue(vulnerabilities.size() == 1);
    }
    
    @Test
    public void getAllVulnerabilitiesTest_Exception() throws Exception {
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenThrow(new Exception());
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertThatThrownBy(() -> vulnerabilityRepository.getAllVulnerabilities(new ArrayList<>()))
        .isInstanceOf(DataException.class);
    }
    
    @Test
    public void getAssetsAffectedCountTest() throws Exception {
        
        String response = "{\"aggregations\":{\"qid\":{\"buckets\":[{\"key\":105130,\"doc_count\":871}]}}}";
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenReturn(response);
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        Map<String, String> filter = new HashMap<>();
        filter.put("tags.Application.keyword", "app");
        filter.put(Constants.SEVEITY_LEVEL, "3");
        
        Map<String, Long>  assetsAffected = vulnerabilityRepository.getAssetsAffectedCount("ag", filter, "parent");
        assertTrue(assetsAffected.size() == 1);
    }
    
    @Test
    public void getAssetsAffectedCountTest_Exception() throws Exception {
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenThrow(new Exception());
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        Map<String, Long>  assetsAffected = vulnerabilityRepository.getAssetsAffectedCount("ag", null, "parent");
        assertTrue(assetsAffected.size() == 0);
    }
    
    @Test
    public void getVulnerabilyAcrossAppAndEnvTest() throws Exception {
        
        String response = "{\"hits\":{\"total\":905},\"aggregations\":{\"apps\":{\"buckets\":[{\"key\":\"APP1\",\"doc_count\":905,"
                + "\"vulns\":{\"doc_count\":5522,\"NAME\":{\"buckets\":{\"S3\":{\"doc_count\":556},\"S4\":{\"doc_count\":469},\"S5\":{\"doc_count\":86}}}}}]}}}";
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenReturn(response);
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertTrue(vulnerabilityRepository.getVulnerabilyAcrossAppAndEnv("ag","tags.Application.keyword", "","parent", "3").size() == 1);
        assertTrue(vulnerabilityRepository.getVulnerabilyAcrossAppAndEnv("ag","tags.Environment.keyword", "app","parent", "").size() == 1);
    }
    
    @Test
    public void getVulnerabilyAcrossAppAndEnvTest_Exception() throws Exception {
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenThrow(new Exception());
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertThatThrownBy(() -> vulnerabilityRepository.getVulnerabilyAcrossAppAndEnv("ag","tags.Application.keyword", "","parent", "3"))
        .isInstanceOf(Exception.class);
    }
    
    @Test
    public void getVulnerabilityTrendTest() throws Exception {
        
        String response = "{\"aggregations\":{\"date\":{\"buckets\":[{\"key_as_string\":\"2018-07-25\",\"key\":1532476800000,"
                + "\"doc_count\":51,\"vulns\":{\"value\":11126}}]}}}";
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenReturn(response);
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        Map<String, String> filter = new HashMap<>();
        filter.put("tags.Application.keyword", "app");
        filter.put("tags.Environment.keyword", "env");
        assertTrue(vulnerabilityRepository.getVulnerabilityTrend("ag",filter,new Date(),new Date()).size() == 1);
    }
    
    @Test
    public void getVulnerabilityTrendTest_Exception() throws Exception {
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenThrow(new Exception());
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertThatThrownBy(() -> vulnerabilityRepository.getVulnerabilityTrend("ag",null,null,null))
        .isInstanceOf(Exception.class);
        
        Map<String, String> filter = new HashMap<>();
        filter.put("test", "test");
        assertThatThrownBy(() -> vulnerabilityRepository.getVulnerabilityTrend("ag",filter,new Date(),null))
        .isInstanceOf(Exception.class);
    }
    
    @Test
    public void getVulnerabilitiesDistributionTest() throws Exception {
        
        String response = "{\"aggregations\":{\"apps\":{\"doc_count_error_upper_bound\":0,\"sum_other_doc_count\":0,"
                + "\"buckets\":[{\"key\":\"APP1\",\"doc_count\":90,\"envs\":{\"doc_count_error_upper_bound\":0,\"sum_other_doc_count\":0,"
                + "\"buckets\":[{\"key\":\"Production::prd\",\"doc_count\":32,\"vulns\":{\"doc_count\":2002,"
                + "\"NAME\":{\"buckets\":{\"S3\":{\"doc_count\":197},\"S4\":{\"doc_count\":164},\"S5\":{\"doc_count\":30}}}}}]}}]}}}";
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenReturn(response);
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertTrue(vulnerabilityRepository.getVulnerabilitiesDistribution("ag","parent").size() == 1);
    }
    
    @Test
    public void getVulnerabilitiesDistributionTest_Exception() throws Exception {
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenThrow(new Exception());
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertThatThrownBy(() -> vulnerabilityRepository.getVulnerabilitiesDistribution("ag","parent"))
        .isInstanceOf(Exception.class);
    }
    
    @Test
    public void getVulnerabilitysummaryByResourceIdTest() throws Exception {
        
        String response = "{\"hits\":{\"total\":518},\"aggregations\":{\"NAME\":{\"buckets\":{\"S3\":{\"doc_count\":556},\"S4\":{\"doc_count\":469},\"S5\":{\"doc_count\":86}}}}}";
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenReturn(response);
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        assertTrue(vulnerabilityRepository.getVulnerabilitysummaryByResourceId("resource").size() == 2);
    }
    
    @Test
    public void getVulnerabilitysummaryByResourceIdTest_Exception() throws Exception {
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenThrow(new Exception());
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        assertTrue(vulnerabilityRepository.getVulnerabilitysummaryByResourceId("resource").size() == 0);
    }
     
    @Test
    public void fetchExecDirectorAppsTest() throws Exception {
        
        when(elasticSearchRepository.getDataFromES(anyString(), anyString(), anyObject(), anyObject(), anyObject(), anyObject(), anyObject())).
        thenReturn(new ArrayList<>());
        assertThat(vulnerabilityRepository.fetchExecDirectorApps(),is(notNullValue()));
    }
    
    @Test
    public void getUniqueHostTest() throws Exception {
        
        String response = "{\"hits\":{\"total\":30056},\"aggregations\":{\"vulninfo\":{\"sev-filter\":{\"severity\":{\"buckets\":["
                + "{\"key\":4,\"unique-host\":{\"value\":25071}},{\"key\":3,\"unique-host\":{\"value\":23776}},"
                + "{\"key\":5,\"unique-host\":{\"value\":19250}}]}}}}}";
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenReturn(response);
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertTrue(vulnerabilityRepository.getUniqueHost("ag","3,4,5").size() == 4);
    }
    
    @Test
    public void getUniqueHostTest_Exception() throws Exception {
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenThrow(new Exception());
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertTrue(vulnerabilityRepository.getUniqueHost("ag","3,4,5").size() == 0);
    }
    
    @Test
    public void getUniqueVulnTest() throws Exception {
        
        String response = "{\"aggregations\":{\"vulninfo\":{\"sev-filter\":{\"doc_count\":668732,\"severity\":{\"buckets\":["
                + "{\"key\":4,\"doc_count\":354352,\"unique-qid\":{\"value\":1377}},{\"key\":3,\"doc_count\":203380,\"unique-qid\":{\"value\":1868}},"
                + "{\"key\":5,\"doc_count\":111000,\"unique-qid\":{\"value\":555}}]}}}}}";
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenReturn(response);
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertTrue(vulnerabilityRepository.getVulnInfo("ag","3,4,5").size() == 4);
    }
    
    @Test
    public void getUniqueVulnTest_Exception() throws Exception {
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenThrow(new Exception());
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertTrue(vulnerabilityRepository.getVulnInfo("ag","3,4,5").size() == 0);
    }
    
    @Test
    public void getUniqueAppTest() throws Exception {
        
        String response = "{\"aggregations\":{\"severity\":{\"buckets\":{\"S3\":{\"doc_count\":871,\"NAME\":{\"value\":1}},"
                + "\"S4\":{\"doc_count\":871,\"NAME\":{\"value\":1}},\"S5\":{\"doc_count\":844,\"NAME\":{\"value\":1}}}}}}";
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenReturn(response);
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertTrue(vulnerabilityRepository.getUniqueApp("ag").size() == 3);
    }
    
    @Test
    public void getUniqueAppTest_Exception() throws Exception {
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenThrow(new Exception());
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        assertTrue(vulnerabilityRepository.getUniqueApp("ag").size() == 0);
    }
    
    @Test
    public void getAgingSummaryTest() throws Exception {
        
        String response = "{\"aggregations\":{\"severity\":{\"buckets\":[{\"key\":3,\"doc_count\":5581,\"aging\":{\"value\":53.36391327719047}},"
                + "{\"key\":4,\"doc_count\":4704,\"aging\":{\"value\":41.863945578231295}},{\"key\":5,\"doc_count\":865,\"aging\":{\"value\":38.522543352601154}}]}}}";
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenReturn(response);
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertTrue(vulnerabilityRepository.getAgingSummary("ag").size() == 3);
    }
    
    @Test
    public void getAgingSummaryTest_Exception() throws Exception {
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenThrow(new Exception());
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        assertTrue(vulnerabilityRepository.getAgingSummary("ag").size() == 0);
    }
    
    @Test
    public void getAgingByApplicationTest() throws Exception {
        
        String response = "{\"aggregations\":{\"apps\":{\"buckets\":[{\"key\":\"APP1\",\"doc_count\":905,\"vulns\":{\"doc_count\":55225,"
                + "\"NAME\":{\"buckets\":{\"S3\":{\"doc_count\":5569,\"aging\":{\"value\":297099}},\"S4\":{\"doc_count\":4694,\"aging\":"
                + "{\"value\":196471}},\"S5\":{\"doc_count\":863,\"aging\":{\"value\":33216}}}}}}]}}}";
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenReturn(response);
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertTrue(vulnerabilityRepository.getAgingByApplication("ag","parent","").size() == 1);
        assertTrue(vulnerabilityRepository.getAgingByApplication("ag","parent","3").size() == 1);
        
        response = "{\"aggregations\":{\"apps\":{\"buckets\":[{\"key\":\"APP1\",\"doc_count\":905,\"vulns\":{\"doc_count\":55225,"
                + "\"NAME\":{\"buckets\":{\"S3\":{\"doc_count\":0,\"aging\":{\"value\":297099}},\"S4\":{\"doc_count\":0,\"aging\":"
                + "{\"value\":196471}},\"S5\":{\"doc_count\":0,\"aging\":{\"value\":33216}}}}}}]}}}";
        assertTrue(vulnerabilityRepository.getAgingByApplication("ag","parent","").size() == 1);
        assertTrue(vulnerabilityRepository.getAgingByApplication("ag","parent","3").size() == 1);
    }
    
    @Test
    public void getAgingByApplicationTest_Exception() throws Exception {
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenThrow(new Exception());
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        assertThatThrownBy(() -> vulnerabilityRepository.getAgingByApplication("ag","parent","3"))
        .isInstanceOf(Exception.class);
    }
    
    @Test
    public void getTotalQualysHostCountTest() throws Exception {
        
        String response = "{\"count\":3}";
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenReturn(response);
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertTrue(vulnerabilityRepository.getTotalQualysHostCount("ag","parent") == 3);
    }
    
    @Test
    public void getTotalQualysHostCountTest_Exception() throws Exception {
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenThrow(new Exception());
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertThatThrownBy(() -> vulnerabilityRepository.getTotalQualysHostCount("ag","parent"))
        .isInstanceOf(DataException.class);
    }
    
    @Test
    public void getVulnerabilityByQidTest() throws Exception {
        
        String response = "{\"hits\":{\"total\":68,\"hits\":[{\"_index\":\"qualys-kb\",\"_type\":\"kb\",\"_id\":\"236591\",\"_score\":8.899231,"
                + "\"_source\":{\"qid\":\"236591\",\"vulntype\":\"Vulnerability\",\"severitylevel\":4,\"title\":\"Red Hat Update for kernel\","
                + "\"category\":\"RedHat\",\"lastservicemodificationdatetime\":\"2018-05-29T20:32:16z\",\"publisheddatetime\":\"2018-01-04T04:02:43z\","
                + "\"_loadDate\":\"2018-07-09T14:23:27z\",\"latest\":true,\"classification\":\"OS\"}}]}}";
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenReturn(response);
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertThat(vulnerabilityRepository.getVulnerabilityByQid("qid"),is(notNullValue()));
    }
    
    @Test
    public void getVulnerabilityByQidTest_Exception() throws Exception {
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenThrow(new Exception());
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertTrue(vulnerabilityRepository.getVulnerabilityByQid("ag").size() ==0);
    }
    
    @Test
    public void getDistributionSummaryByInfraTypeTest() throws Exception {
        
        String response = "{\"hits\":{\"total\":515,\"max_score\":0,\"hits\":[]},\"aggregations\":{\"NAME\":{\"doc_count\":32252,"
                + "\"NAME\":{\"doc_count\":6361,\"NAME\":{\"value\":37}}}}}";
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenReturn(response);
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertTrue(vulnerabilityRepository.getDistributionSummaryByInfraType("ag","","parent").size() == 3);
    }
    
    @Test
    public void getDistributionSummaryByInfraTypeTest_Exception() throws Exception {
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenThrow(new Exception());
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertThatThrownBy(() -> vulnerabilityRepository.getDistributionSummaryByInfraType("ag","3","parent"))
        .isInstanceOf(DataException.class);
    }
    
    @Test
    public void getProdInfoByEnvTest() throws Exception {
        
        String response = "{\"hits\":{\"total\":515,\"max_score\":0,\"hits\":[]},\"aggregations\":{\"NAME\":{\"doc_count\":32252,"
                + "\"NAME\":{\"doc_count\":6361,\"NAME\":{\"value\":37}}}}}";
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenReturn(response);
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertTrue(vulnerabilityRepository.getProdInfoByEnv("ag","").size() == 3);
    }
    
    @Test
    public void getProdInfoByEnvTest_Exception() throws Exception {
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenThrow(new Exception());
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertTrue(vulnerabilityRepository.getProdInfoByEnv("ag","3").size() == 0);
    }
    
    @Test
    public void getNonProdInfoByEnvTest() throws Exception {
        
        String response = "{\"hits\":{\"total\":515,\"max_score\":0,\"hits\":[]},\"aggregations\":{\"NAME\":{\"doc_count\":32252,"
                + "\"NAME\":{\"doc_count\":6361,\"NAME\":{\"value\":37}}}}}";
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenReturn(response);
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertTrue(vulnerabilityRepository.getNonProdInfoByEnv("ag","").size() == 3);
    }
    
    @Test
    public void getNonProdInfoByEnvTest_Exception() throws Exception {
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenThrow(new Exception());
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertTrue(vulnerabilityRepository.getNonProdInfoByEnv("ag","3").size() == 0);
    }
    
    @Test
    public void getDistributionSummaryByVulnTypeTest() throws Exception {
        
        String response1 = "{\"aggregations\":{\"vulninfo\":{\"doc_count\":126339,\"sev-filter\":"
                + "{\"doc_count\":104821,\"classification\":{\"buckets\":[{\"key\":\"OS\",\"doc_count\":94207,\"resources\":{\"value\":4219}},"
                + "{\"key\":\"Application\",\"doc_count\":10614,\"resources\":{\"value\":1869}}]}}}}}";
        
        String response2 = "{\"aggregations\":{\"vulninfo\":{\"doc_count\":126339,\"sev-filter\":"
                + "{\"doc_count\":104821,\"classification\":{\"buckets\":[{\"key\":\"OS\",\"doc_count\":94207,\"unique-qid\":{\"value\":1156}},"
                + "{\"key\":\"Application\",\"doc_count\":10614,\"unique-qid\":{\"value\":428}}]}}}}}";
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenReturn(response1,response2);
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertTrue(vulnerabilityRepository.getDistributionSummaryByVulnType("ag","").size() == 2);
    }
    
    @Test
    public void getDistributionSummaryByVulnTypeTest_Exception() throws Exception {
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenThrow(new Exception());
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertThatThrownBy(() -> vulnerabilityRepository.getDistributionSummaryByVulnType("ag","3"))
        .isInstanceOf(DataException.class);
    }
    
    @Test
    public void getAllQidByAGTest() throws Exception {
        
        String response = "{\"aggregations\":{\"qid\":{\"buckets\":[{\"key\":\"105130~unix group list~OS\",\"doc_count\":873}]}}}";
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenReturn(response);
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertTrue(vulnerabilityRepository.getAllQidByAG("ag","").size() == 1);
    }
    
    @Test
    public void getAllQidByAGTest_Exception() throws Exception {
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenThrow(new Exception());
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertThatThrownBy(() -> vulnerabilityRepository.getAllQidByAG("ag","3"))
        .isInstanceOf(DataException.class);
    }
    
    @Test
    public void getAppsBySeverityTest() throws Exception {
        
        String response = "{\"aggregations\":{\"apps\":{\"buckets\":[{\"key\":\"APP1\",\"doc_count\":905,"
                + "\"vulns\":{\"doc_count\":55283,\"NAME\":{\"buckets\":{\"severity\":{\"doc_count\":12242}}}}}]}}}";
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenReturn(response);
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertTrue(vulnerabilityRepository.getAppsBySeverity("ag","parent","").size() == 1);
    }
    
    @Test
    public void getAppsBySeverityTest_Exception() throws Exception {
        
        mockStatic(PacHttpUtils.class);
        when(PacHttpUtils.doHttpPost(anyString(), anyString())).thenThrow(new Exception());
        ReflectionTestUtils.setField(vulnerabilityRepository, "esUrl", "dummyEsURL");
        
        assertThatThrownBy(() -> vulnerabilityRepository.getAppsBySeverity("ag","parent","3"))
        .isInstanceOf(Exception.class);
    }
}
